import os
import time
from pathlib import Path
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

INPUT_DIR = Path("input_zip")
OUTPUT_DIR = Path("cert_packageV1")

# Only generate PSAC.md for now
DOCUMENTS = {
    "planning": ["PSAC.md"]
}

BASE_SYSTEM_PROMPT = """You are an expert software certification assistant specializing in RTCA DO-178C and DO-331 for airborne systems.
The user provides Simulink models, autogenerated C code, requirement specifications, and context about their verification and configuration processes.
Your task is to generate a certification document titled {title} with tailored content based on the input.
Assume Design Assurance Level (DAL) B unless stated otherwise.
Format output in clean Markdown, suitable for copy-paste into Word or PDF, using clear headers and bullet structure.
Avoid commentary. Provide only structured, editable document content.
"""

def read_input_context():
    all_text = ""
    for path in INPUT_DIR.rglob("*.[ch]"):
        try:
            with open(path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read()
                all_text += f"\n\n# File: {path.relative_to(INPUT_DIR)}\n\n{content}"
        except Exception as e:
            print(f"Error reading {path}: {e}")
    return all_text

def generate_documents(_context):
    title = "PSAC"
    print(f"Generating test document for {title}...")

    messages = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Write a short software certification summary for testing purposes."}
    ]

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.3
        )
        content = response.choices[0].message.content
    except Exception as e:
        content = f"Error generating {title}:\n\n{e}"

    output_path = OUTPUT_DIR / "planning" / "PSAC.md"
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(content)

if __name__ == "__main__":
    print("Reading context from input_zip...")
    context = read_input_context()
    print("Generating documents...")
    generate_documents(context)
    print("Done.")
